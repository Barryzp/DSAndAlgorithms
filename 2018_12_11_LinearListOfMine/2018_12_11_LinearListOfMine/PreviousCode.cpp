
/////////////////////////////////////////////////////////////////////////
//1............../**********************顺序表存储调试*******************/
/*struct MyStruct //用于测试malloc和new对string动态分配内存
{
int a;
char b;
string b;
};*/
/////////////////////////////////////////////////////////////////////////
/*Node ls[MAXSIZE] = { {"hello",0},{ "facing",1 },{ "world",3 },{ "fucker",4 } };
RankedStrorageList rs = RankedStrorageList(ls,4);
rs.ShowWindow();
*/
//int size = 10;
//Node *p2 = ls;
/////////////////////////////////////////////////////////////////////////
//MyStruct *ms = (MyStruct *)malloc(size*sizeof(MyStruct));
///*MyStruct *ms = new MyStruct[size];*/
//for (int i = 0; i < 10; i++)
//{
//	ms[i].b = 's';
//}
//cout << ms[4].b << endl;
/////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////
//2............../**********************单链表存储调试*******************/
/*LinkedList ls = LinkedList();
ls.CreateLS();
ls.ShowWindow();*/
/////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////
//3............../**********************单循环链表（尾指针）存储调试*******************/
/*LoopLinkedList lls = LoopLinkedList();
lls.CreateLLS();
lls.ShowWindow();*/
/////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////
//4............../**********************双向链表存储调试*******************/
/*TwoWayLinkedList twLls = TwoWayLinkedList();
twLls.CreateTWLS();
twLls.ShowWindow();*/
/////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////
//5............../**********************静态链表存储调试*******************/
/*StaticLinkedList sll = StaticLinkedList();
sll.InitializeStaticLs();
sll.ShowWindow();*/
/////////////////////////////////////////////////////////////////////////
